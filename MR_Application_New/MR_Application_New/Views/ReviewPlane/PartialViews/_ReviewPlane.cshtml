@model List<Model_New.Models.QuestionsNew>
@{
    ViewData["Title"] = "Review Plan";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <div class="container mt-5 p-4 border rounded shadow-lg bg-light">
        <!-- Step 1: Review Plan -->
        <div id="step-1">
            <h3 class="text-center mb-4 text-primary fw-bold border-bottom pb-2">
                Review Plan
            </h3>
            <div class="row g-3">
                <div class="col-12 col-sm-6">
                    <div class="p-3 border rounded bg-white">
                        <label class="form-label fw-bold">MR Code:</label>
                        <input type="text" id="mrcodeInput" class="form-control" name="mrcode"
                               value="@Context.Session.GetString("UserName")" readonly>
                    </div>
                </div>

                <div class="col-12 col-sm-6 position-relative">
                    <div class="p-3 border rounded bg-white">
                        <label class="form-label fw-bold">Select RSCODE:</label>
                        <input type="text" id="rscodeInput" class="form-control" placeholder="Type RSCODE ..." autocomplete="off">
                        <input type="hidden" id="selectedRscode" name="selectedRscode">
                        <div id="rscodeSuggestions" class="list-group position-absolute w-100" style="z-index: 1000; display: none;"></div>
                    </div>
                </div>


                <!-- Ensure FontAwesome is included in your project -->
                <!-- Ensure FontAwesome is included -->
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

                <div class="col-12 col-sm-6 col-md-4 col-lg-3 text-center">
                    <button type="button" class="btn btn-danger w-100 d-flex align-items-center justify-content-center py-2" id="openSrModal">
                        <i class="fas fa-user-tie fa-lg me-2"></i>
                        <span class="fw-bold">Select SR Name</span>
                    </button>
                </div>



                <div class="col-12 col-sm-6 col-md-4 col-lg-3 text-center">
                    <button type="button" id="openRouteFilterModal" class="btn btn-primary d-flex align-items-center">
                        <i class="bi bi-funnel me-2"></i> Filter by Route
                    </button>
                </div>



              

                <div class="col-12 col-sm-6 position-relative">
                    <div class="p-3 border rounded bg-white">
                        <label class="form-label fw-bold">Search Outlet:</label>
                        <input type="text" id="outletInput" class="form-control" placeholder="Type to search..." autocomplete="off">
                        <input type="hidden" id="selectedOutlet" name="selectedOutlet">
                        <div id="outletSuggestions" class="list-group position-absolute w-100" style="z-index: 1000; display: none;"></div>
                    </div>
                </div>





            <div class="col-md-6 col-12">
                <div class="form-group">
                    <label for="elementInput">Element:</label>
                    <input type="text" id="elementInput" class="form-control" readonly>
                </div>
            </div>
            <div class="col-md-6 col-12">
                <div class="form-group">
                    <label for="subelementInput">Subelement:</label>
                    <input type="text" id="subelementInput" class="form-control" readonly>
                </div>
            </div>

            <!-- Full Address (Single Row) -->
            <div class="col-12">
                <div class="form-group">
                    <label for="fullAddressInput">Full Address:</label>
                    <input type="text" id="fullAddressInput" class="form-control" readonly>
                </div>
            </div>

            <!-- Route Date & Route Name in the Same Row -->
            <div class="col-md-6 col-12">
                <div class="form-group">
                    <label for="selectedrouteDateInput">Route Date:</label>
                    <input type="text" id="selectedrouteDateInput" class="form-control" readonly>
                </div>
            </div>
            <div class="col-md-6 col-12">
                <div class="form-group">
                    <label for="selectedrouteNameInput">Route Name:</label>
                    <input type="text" id="selectedrouteNameInput" class="form-control" readonly>
                </div>
            </div>

                <div class="col-12 text-center">
                    <button type="button" class="btn btn-success" id="capturePhotoBtn">Capture Photo</button>
                    <input type="hidden" id="photoCaptured" name="photoCaptured">
                    <p class="text-danger d-none" id="photoError">Please capture a photo before proceeding.</p>
                </div>

                <!-- Display Captured Image -->
                <div class="col-12 text-center mt-3">
                    <img id="capturedImage" class="border rounded d-none" style="max-width: 200px;">
                </div>



                <div class="col-12 text-center mt-4">
                    <button type="button" class="btn btn-success btn-lg px-5 py-2 fw-bold shadow" id="saveReview">
                        <i class="fas fa-save"></i> Save Data
                    </button>
                    <p class="text-success d-none mt-2 fw-bold" id="saveSuccessMsg">✔ Data Saved Successfully!</p>
                </div>



                <div class="col-12 text-center mt-4">
                    <button type="button" class="btn btn-primary btn-lg px-5 py-2 fw-bold shadow" id="nextStep1" disabled>
                        Next <i class="fas fa-arrow-right"></i>
                    </button>
                </div>


            </div>



          
        </div>


        <div class="modal fade" id="photoModal" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Capture Photo</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body text-center">
                        <video id="webcam" autoplay class="border rounded w-100"></video>
                        <canvas id="canvas" class="d-none"></canvas>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="captureBtn">Capture</button>
                    </div>
                </div>
            </div>
        </div>


        <div class="modal fade" id="srModal" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Select SR Name</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <ul id="srList" class="list-group">
                            <!-- SR Names will be dynamically added here -->
                        </ul>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" id="selectSr">Confirm</button>
                    </div>
                </div>
            </div>
        </div>



        <!-- Route Filter Modal -->
        <!-- Route Filter Modal -->
        <div class="modal fade" id="routeFilterModal" tabindex="-1" aria-labelledby="routeFilterModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="routeFilterModalLabel">Filter by Route</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Route Name:</label>
                            <select id="routenameInput" class="form-control" name="routename">
                                <option value="">Select Route Name</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Route Day:</label>
                            <select id="routedayInput" class="form-control" name="routeday">
                                <option value="">Select Route Day</option>
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button id="applyRouteFilter" class="btn btn-primary">Apply Filter</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Add this modal to your view -->
<div class="modal fade" id="confirmationModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title">⚠️ Missing Selections</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>You haven't selected Sales Representatives or Route filters. Are you sure you want to continue?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                <button type="button" class="btn btn-primary" id="confirmProceed">Yes</button>
            </div>
        </div>
    </div>
</div>




        <script>
            // document.addEventListener("DOMContentLoaded", function () {
            //     const capturePhotoBtn = document.getElementById("capturePhotoBtn");
            //     const photoModal = new bootstrap.Modal(document.getElementById("photoModal"));
            //     const webcam = document.getElementById("webcam");
            //     const canvas = document.getElementById("canvas");
            //     const captureBtn = document.getElementById("captureBtn");
            //     const capturedImage = document.getElementById("capturedImage");
            //     const photoCaptured = document.getElementById("photoCaptured");
            //     const photoError = document.getElementById("photoError");
            //     const nextStepBtn = document.getElementById("nextStep1"); // ✅ "Next" button
            //     let stream = null;
            //     let capturedFile = null; // ✅ Stores captured image file
            //     let isDataSaved = false; // ✅ Tracks if data is saved

            //     // Disable "Next" button initially
            //     nextStepBtn.disabled = true;

            //     // Open webcam when clicking Capture Photo button
            //     capturePhotoBtn.addEventListener("click", async function () {
            //         try {
            //             stream = await navigator.mediaDevices.getUserMedia({ video: true });
            //             webcam.srcObject = stream;
            //             photoModal.show();
            //         } catch (error) {
            //             alert("❌ Error accessing webcam: " + error.message);
            //         }
            //     });

            //     // Stop camera when modal is closed
            //     document.getElementById("photoModal").addEventListener("hidden.bs.modal", function () {
            //         if (stream) {
            //             stream.getTracks().forEach(track => track.stop());
            //         }
            //     });

            //     // Convert Base64 to File
            //     function dataURLtoFile(dataUrl, filename) {
            //         let arr = dataUrl.split(','), mime = arr[0].match(/:(.*?);/)[1],
            //             bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
            //         while (n--) {
            //             u8arr[n] = bstr.charCodeAt(n);
            //         }
            //         return new File([u8arr], filename, { type: mime });
            //     }

            //     // Capture Image
            //     captureBtn.addEventListener("click", function () {
            //         const context = canvas.getContext("2d");
            //         canvas.width = webcam.videoWidth;
            //         canvas.height = webcam.videoHeight;
            //         context.drawImage(webcam, 0, 0, canvas.width, canvas.height);
            //         const imageDataURL = canvas.toDataURL("image/png");

            //         // Convert Base64 to File
            //         capturedFile = dataURLtoFile(imageDataURL, "captured_photo.png");

            //         // Stop webcam stream
            //         if (stream) {
            //             stream.getTracks().forEach(track => track.stop());
            //         }

            //         // Display captured image
            //         capturedImage.src = imageDataURL;
            //         capturedImage.classList.remove("d-none");
            //         photoCaptured.value = imageDataURL; // Store captured image data
            //         photoModal.hide();
            //         photoError.classList.add("d-none");
            //     });

            //     // Save Review AJAX Call
            //     $("#saveReview").click(function () {
            //         var rscode = $("#selectedRscode").val();
            //         var mrCode = $("#mrcodeInput").val();
            //         var outlet = $("#selectedOutlet").val();
            //         var outletType = $("#outletType").val();

            //         if (!rscode) {
            //             alert("❌ RS Code is required.");
            //             return;
            //         }
            //         if (!mrCode) {
            //             alert("❌ MR Code is required.");
            //             return;
            //         }
            //         if (!outlet) {
            //             alert("❌ Outlet is required.");
            //             return;
            //         }
            //         if (!outletType) {
            //             alert("❌ Outlet Type is required.");
            //             return;
            //         }
            //         if (!capturedFile) {
            //             alert("❌ Please capture a photo.");
            //             return;
            //         }

            //         var formData = new FormData();
            //         formData.append("rscode", rscode);
            //         formData.append("mrCode", mrCode);
            //         formData.append("outlet", outlet);
            //         formData.append("outletType", outletType);
            //         formData.append("capturedPhoto", capturedFile);

            //         $.ajax({
            //             url: '/ReviewPlane/GetReviewstoreImg',
            //             type: 'POST',
            //             processData: false,
            //             contentType: false,
            //             data: formData,
            //             success: function (response) {
            //                 alert("✅ " + response.message);
            //                 isDataSaved = true; // ✅ Mark as saved
            //                 nextStepBtn.disabled = false; // ✅ Enable "Next" button
            //             },
            //             error: function (xhr) {
            //                 var errorMsg = xhr.responseJSON?.message || "❌ Error saving review.";
            //                 alert(errorMsg);
            //             }
            //         });
            //     });


    //             document.getElementById("nextStep1").addEventListener("click", function() {
    // if (isDataSaved) {
    //     window.location.href = '/ReviewPlane/aftercreate'; 
    // } else {
    //     alert("⚠️ Please save the data before proceeding.");
    // }




// Update the existing nextStep1 click handler
// document.getElementById("nextStep1").addEventListener("click", function()
// {
//     if (!isDataSaved) {
//         alert("⚠️ Please save the data before proceeding.");
//         return;
//     }

//     Check if SR and Route are selected
//     const isSrSelected = selectedSr.trim().length > 0;
//     const isRouteSelected = $("#routenameInput").val() && $("#routedayInput").val();

//     if (!isSrSelected || !isRouteSelected) {
//         Show confirmation modal
//         const confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
//         confirmationModal.show();
//     } else {
//         Proceed directly if everything is selected
//         window.location.href = '/ReviewPlane/aftercreate';
//     }
// });

// Add confirmation handler
// document.getElementById("confirmProceed").addEventListener("click", function() 
// {
//     window.location.href = '/ReviewPlane/aftercreate';
//     bootstrap.Modal.getInstance(document.getElementById('confirmationModal')).hide();
// });



//                 Prevent Next button if data is not saved
                
//             });



        </script>


    </div>


@section Scripts {
    <script>
        $(document).ready(function () {
           // ✅ Global Variables to Store Selected SR and RSCODE
        let selectedSrs = {}; // Stores selected SRs
        let selectedSr = "";  // Store final selected SR
        let rscode = "";       // Store final selected RSCODE

        let  routeDate = "";
            let routeName = "";




                 $(document).ready(function () {
            // Open Modal on Button Click
            $("#openRouteFilterModal").click(function () {
                $("#routeFilterModal").modal("show");
            });

            // Apply Filter Button in Modal
            $("#applyRouteFilter").click(function (event) {
                event.preventDefault(); // Prevent any unintended form submission
                $("#routeFilterModal").modal("hide"); // Close modal

                // Optional: Show a success message
                alert("success", "✅ Route filter applied.");
            });
        });

        






        // ✅ Open SR Modal & Fetch SR List
        $("#openSrModal").click(function () {
            let rscodeFull = $("#rscodeInput").val().trim();
            rscode = rscodeFull.split(" ")[0].trim(); // Extract first part of RSCODE

            if (!rscode) {
                alert("⚠️ Please enter/select an RSCODE first.");
                return;
            }

            alert(`🔍 Fetching SRs for RSCODE: ${rscode}`);

            // Fetch SR Names based on RSCODE
            $.ajax({
                url: "/ReviewPlane/GetSrNames",
                type: "GET",
                data: { rscode },
                success: function (response) {
                    alert(`✅ SRs fetched successfully. Found ${response.length} SR(s).`);

                    $("#srList").empty(); // Clear previous list
                    if (response.length === 0) {
                        alert("⚠️ No sales representatives found.");
                        return;
                    }

                    response.forEach(sr => {
                        let isChecked = selectedSrs[sr.fullDetails] ? "checked" : "";
                        $("#srList").append(`
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <input type="checkbox" class="form-check-input sr-checkbox" value="${sr.fullDetails}" data-rscode="${sr.rS_Code}" ${isChecked}>
                                <label class="ms-2">${sr.fullDetails}</label>
                            </li>
                        `);
                    });

                    $("#srModal").modal("show");
                },
                error: function () {
                    alert("❌ Failed to fetch SR names. Try again later.");
                }
            });
        });




        // ✅ Track SR Selection
        $(document).on("change", ".sr-checkbox", function () {
            let srValue = $(this).val();
            if ($(this).is(":checked")) {
                selectedSrs[srValue] = true;
            } else {
                delete selectedSrs[srValue];
            }
        });

        // ✅ Confirm SR Selection & Fetch Routes
        $("#selectSr").click(function () {
            let selectedSrArray = Object.keys(selectedSrs);
            selectedSr = selectedSrArray.join(", "); // Store globally
            rscode = $(".sr-checkbox:checked").first().data("rscode") || ""; // Store globally

            if (!selectedSr) {
                alert("⚠️ Please select at least one SR Name.");
                return;
            }

            $("#srModal").modal("hide");

            // Fetch Routes Based on Selected SR
            $.ajax({
                url: "/ReviewPlane/GetRouteNames",
                type: "GET",
                data: { srname: selectedSr, rscode },
                success: function (routes) {
                    alert(`✅ Routes fetched successfully. Found ${routes.length} route(s).`);

                    $("#routenameInput").empty().append('<option value="">Select Route Name</option>');

                    routes.forEach(route => {
                        let localityName = route.locality_Name === "N.A." ? "TBA" : route.locality_Name;
                        $("#routenameInput").append(`<option value="${localityName}">${localityName}</option>`);
                    });
                },
                error: function () {
                    alert("❌ Failed to fetch route names.");
                }
            });
        });

        // ✅ Fetch Route Days when Route is Selected
        $("#routenameInput").change(function () {
            let routename = $(this).val()?.trim() || "";

            if (!selectedSr || !rscode || !routename) {
                alert("⚠️ Please select an SR and Route before proceeding.");
                return;
            }

            alert(`🔍 Fetching Route Days for: ${routename} | SR: ${selectedSr} | RSCODE: ${rscode}`);

            $.ajax({
                url: "/ReviewPlane/GetRouteDays",
                type: "GET",
                data: { srname: selectedSr, rscode, routename },
                success: function (routeDays) {
                    alert(`✅ Route Days fetched successfully. Found ${routeDays.length} day(s).`);

                    let daysOfWeek = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
                    let todayIndex = new Date().getDay();

                    $("#routedayInput").empty().append('<option value="">Select Route Day</option>');

                    routeDays.forEach(day => {
                        if (daysOfWeek.includes(day)) {
                            let isSelected = (daysOfWeek.indexOf(day) === todayIndex - 1) ? 'selected' : '';
                            $("#routedayInput").append(`<option value="${day}" ${isSelected}>${day}</option>`);
                        }
                    });
                },
                error: function () {
                    alert("❌ Failed to fetch route days.");
                }
            });
        });


                $("#outletInput").on("keyup", function () {
            var searchTerm = $(this).val().trim();
            var rscode = $("#selectedRscode").val();
            let srname = selectedSr;
             routeDate = $("#routedayInput").val();
             routeName = $("#routenameInput").val();

       

            if (searchTerm.length > 2 && rscode) {
                let requestData = { term: searchTerm, rscode: rscode };

                // If additional parameters exist, include them in the request
                if (srname && routeDate && routeName) {
                    requestData.srname = srname;
                    requestData.routeDate = routeDate;
                    requestData.routeName = routeName;
                }
                alert("🔍 Fetching Outlets with Data: " + JSON.stringify(requestData));

                $.get('/ReviewPlane/GetOutlets', requestData)
                    .done(function (data) {
                        $("#outletSuggestions").empty().show();

                        if (data.length > 0) {
                            data.forEach(item => {
                                $("#outletSuggestions").append(
                                    `<a class="list-group-item list-group-item-action p-2"
                                        data-code="${item.code}" data-name="${item.name}">
                                        ${item.name} (${item.code})
                                    </a>`
                                );
                            });
                        } else {
                            $("#outletSuggestions").hide();
                            alert("⚠️ No matching outlets found!");
                        }
                    })
                    .fail(function (xhr, status, error) {
                        alert("❌ Error fetching outlets: " + error);
                    });
            } else {
                $("#outletSuggestions").hide();
            }
        });

        // ✅ Select Outlet from Dropdown
           $(document).on("click", "#outletSuggestions .list-group-item", function () {
            let selectedOutletName = $(this).data("name");
            let selectedOutletCode = $(this).data("code");
            let selectedRscode = $("#selectedRscode").val();

              routeDate = $("#routedayInput").val();
             routeName = $("#routenameInput").val();


                 $("#selectedrouteDateInput").val(routeDate || "");
        $("#selectedrouteNameInput").val(routeName || "");


             console.log(routeDate,routeName);


            $("#outletInput").val(selectedOutletName + " (" + selectedOutletCode + ")");
            $("#selectedOutlet").val(selectedOutletCode);
            $("#outletSuggestions").hide();



            alert("✅ Selected Outlet: " + selectedOutletName + " (" + selectedOutletCode + ")");

            // 🔍 Fetch Element, Subelement, Address, and Route Details
             $.get('/ReviewPlane/GetChannelMaster', { outletCode: selectedOutletCode, rscode: selectedRscode })
        .done(function (data) {
            if (data.error) {
                alert(data.error);
                $("#elementInput, #subelementInput, #fullAddressInput").val("");
            } else {
                $("#elementInput").val(data.element);
                $("#subelementInput").val(data.sub_element);

                // Combine Address Fields
                let fullAddress = [data.address1, data.address2, data.address3, data.address4]
                    .filter(addr => addr) // Remove null or empty values
                    .join(", ");

                $("#fullAddressInput").val(fullAddress);
            }
        })
        .fail(function (xhr, status, error) {
            alert("❌ Error fetching channel master data: " + error);
        });

        });








                   $("#rscodeInput").on("keyup", function () {
            var searchTerm = $(this).val().trim();
            if (searchTerm.length > 0) {
                $.get('/ReviewPlane/GetRSCodes', { term: searchTerm })
                    .done(function (data) {
                        $("#rscodeSuggestions").empty().show();
                        data.forEach(item => {
                            $("#rscodeSuggestions").append(
                                `<a class="list-group-item list-group-item-action p-2"
                                    data-id="${item.code}" data-name="${item.name}">
                                    <strong>${item.code}</strong> - ${item.name}
                                </a>`
                            );
                        });
                    })
                    .fail(function (xhr, status, error) {
                        alert("Error fetching RSCODEs: " + error);
                        console.error("Failed to fetch RSCODEs:", xhr.responseText);
                    });
            } else {
                $("#rscodeSuggestions").hide();
            }
        });

        // 🔹 Select RSCODE from dropdown
        $(document).on("click", "#rscodeSuggestions .list-group-item", function () {
            $("#rscodeInput").val($(this).data("id") + " - " + $(this).data("name"));
            $("#selectedRscode").val($(this).data("id"));
            $("#rscodeSuggestions").hide();
        });



            // // 🔹 Fetch Outlet Types from Server
            // $.get('/ReviewPlane/GetOutletTypes')
            //     .done(function (data) {
            //         let outletDropdown = $("#outletType");
            //         outletDropdown.empty().append('<option value="">Select Outlet Type</option>');

            //         if (data.length > 0) {
            //             data.forEach(item => {
            //                 outletDropdown.append(`<option value="${item.value}">${item.text}</option>`);
            //             });
            //         }
            //     })
            //     .fail(function (xhr, status, error) {
            //         alert("Error fetching outlet types: " + error);
            //     });

    



                // ✅ Redirect to After Create Page

                        $(document).ready(function () 
                        
           {


            const photoModal = new bootstrap.Modal($("#photoModal"));
            let stream = null;
            let capturedFile = null;
            let isDataSaved = false;

            $("#nextStep1").prop("disabled", true);

            $("#capturePhotoBtn").click(async function () {
                try {
                    stream = await navigator.mediaDevices.getUserMedia({ video: true });
                    $("#webcam")[0].srcObject = stream;
                    photoModal.show();
                } catch (error) {
                    alert("❌ Error accessing webcam: " + error.message);
                }
            });

            $("#photoModal").on("hidden.bs.modal", function () {
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                }
            });

            function dataURLtoFile(dataUrl, filename) {
                let arr = dataUrl.split(','), mime = arr[0].match(/:(.*?);/)[1],
                    bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
                while (n--) {
                    u8arr[n] = bstr.charCodeAt(n);
                }
                return new File([u8arr], filename, { type: mime });
            }

            $("#captureBtn").click(function () {
                let canvas = $("#canvas")[0];
                let context = canvas.getContext("2d");
                let webcam = $("#webcam")[0];

                canvas.width = webcam.videoWidth;
                canvas.height = webcam.videoHeight;
                context.drawImage(webcam, 0, 0, canvas.width, canvas.height);
                let imageDataURL = canvas.toDataURL("image/png");

                capturedFile = dataURLtoFile(imageDataURL, "captured_photo.png");

                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                }

                $("#capturedImage").attr("src", imageDataURL).removeClass("d-none");
                $("#photoCaptured").val(imageDataURL);
                photoModal.hide();
                $("#photoError").addClass("d-none");
            });

            $("#saveReview").click(function () {
                let rscode = $("#selectedRscode").val();
                let mrCode = $("#mrcodeInput").val();
                let outlet = $("#selectedOutlet").val();
                let outletType = $("#elementInput").val();

                let SrName=selectedSr;

                console.log(SrName);

                if (!rscode || !mrCode || !outlet || !outletType) {
                    alert("❌ All fields are required.");
                    return;
                }
                if (!capturedFile) {
                    alert("❌ Please capture a photo.");
                    return;
                }

                let formData = new FormData();
                formData.append("rscode", rscode);
                formData.append("mrCode", mrCode);
                formData.append("outlet", outlet);
                formData.append("outletType", outletType);
                formData.append("capturedPhoto", capturedFile);
                formData.append("SrName",SrName)

                $.ajax({
                    url: '/ReviewPlane/GetReviewstoreImg',
                    type: 'POST',
                    processData: false,
                    contentType: false,
                    data: formData,
                    success: function (response) {
                        alert("✅ " + response.message);
                        isDataSaved = true;
                        $("#nextStep1").prop("disabled", false);
                    },
                    error: function (xhr) {
                        alert(xhr.responseJSON?.message || "❌ Error saving review.");
                    }
                });


            });

                       $("#nextStep1").click(function () {
            if (!isDataSaved) {
                alert("⚠️ Please save the data before proceeding.");
                return;
            }

            // Check if SR and Route are selected
            var isSrSelected = selectedSr && selectedSr.trim().length > 0;
            var isRouteSelected = $("#routenameInput").val() && $("#routedayInput").val();

            if (!isSrSelected || !isRouteSelected) {
                // Show confirmation modal
                var confirmationModal = new bootstrap.Modal($("#confirmationModal"));
                confirmationModal.show();
                return;
            }

            // Proceed with AJAX request
            var requestData = {
                rscode: $("#selectedRscode").val(),
                mrCode: $("#mrcodeInput").val(),
                outlet: $("#selectedOutlet").val(),
                outlettype: $("#elementInput").val()
            };

            // Validate input fields
            if (!requestData.rscode || !requestData.mrCode || !requestData.outlet || !requestData.outlettype) {
                alert("⚠️ Please provide all required inputs.");
                return;
            }

            $.ajax({
                url: "/ReviewPlane/GetQuestions",
                type: "GET",
                data: requestData,
                success: function (response) {
                    if (response.success && response.data.length > 0) {
                        alert("✅ Questions fetched successfully!");
                        console.log("nextStep1clicked");
                        // Hide the modal after success
                        var confirmationModal = bootstrap.Modal.getInstance($("#confirmationModal"));
                        if (confirmationModal) {
                            confirmationModal.hide();
                        }

                        // Redirect to GetQuestions view
                        window.location.href = "/ReviewPlane/GetQuestions1?" + $.param(requestData);
                    } else {
                        alert("❌ No questions available for the selected Outlet Type. Please check the data.");
                                                console.log("nextStep1clicked");

                                       location.reload();

                    }
                },
                error: function (xhr) {
                    alert("❌ Error fetching questions: " + xhr.responseText);
                }
            });
        });


            // Add confirmation handler
                $("#confirmProceed").click(function () {
            console.log("Confirm Proceed clicked");

            // Prepare request data
            var requestData = {
                rscode: $("#selectedRscode").val(),
                mrCode: $("#mrcodeInput").val(),
                outlet: $("#selectedOutlet").val(),
                outlettype: $("#elementInput").val()
            };

            // Validate input fields
            if (!requestData.rscode || !requestData.mrCode || !requestData.outlet || !requestData.outlettype) {
                alert("⚠️ Please provide all required inputs.");
                return;
            }

            $.ajax({
                url: "/ReviewPlane/GetQuestions",
                type: "GET",
                data: requestData,
                success: function (response) {
                    if (response.success && response.data.length > 0) {
                        // Questions found, proceed to GetQuestions view
                        alert("✅ Questions fetched successfully!");

                        // Hide confirmation modal before proceeding
                        $("#confirmationModal").modal("hide");

                        // Redirect to GetQuestions view
                        window.location.href = "/ReviewPlane/GetQuestions1?" + $.param(requestData);
                    } else {
                        // No questions available, refresh the page
                        alert("❌ No questions available for the selected Outlet Type. Please check the data.");
                        console.log("No questions found, refreshing page.");

                        // Hide confirmation modal
                        $("#confirmationModal").modal("hide");

                        // Refresh the page
                        location.reload();
                    }
                },
                error: function (xhr) {
                    alert("❌ Error fetching questions: " + xhr.responseText);
                }
            });
        });




        });


        //         $("#nextStep1").click(function () {
        //     if (!isDataSaved) {
        //         alert("⚠️ Please save the data before proceeding.");
        //         return;
        //     }

        //     // Prepare request data
        //     var requestData = {
        //         rscode: $("#selectedRscode").val(),
        //         mrCode: $("#mrcodeInput").val(),
        //         outlet: $("#selectedOutlet").val(),
        //         outlettype: $("#elementInput").val()
        //     };

        //     // Validate input fields
        //     if (!requestData.rscode || !requestData.mrCode || !requestData.outlet || !requestData.outlettype) {
        //         alert("⚠️ Please provide all required inputs.");
        //         return;
        //     }

        //     $.ajax({
        //         url: "/ReviewPlane/GetQuestions",
        //         type: "GET",
        //         data: requestData,
        //         success: function (response) {
        //             if (response.success) {
        //                 alert("✅ Questions fetched successfully!");

        //                 // Hide modal after success
        //                 var confirmationModal = bootstrap.Modal.getInstance($("#confirmationModal"));
        //                 if (confirmationModal) {
        //                     confirmationModal.hide();
        //                 }

        //                 // Redirect to GetQuestions view
        //                 window.location.href = "/ReviewPlane/GetQuestions?" + $.param(requestData);
        //             } else {
        //                 alert("❌ No questions available for the selected Outlet Type. Please check the data.");

        //                 // Clear input fields instead of redirecting
        //                 $("#selectedRscode").val("");
        //                 $("#mrcodeInput").val("");
        //                 $("#selectedOutlet").val("");
        //                 $("#elementInput").val("");
        //             }
        //         },
        //         error: function (xhr) {
        //             alert("❌ Error fetching questions: " + xhr.responseText);
        //         }
        //     });
        // });



        //         $(document).ready(function () {
        //     $("#nextStep1").click(function (event) {
        //         if (!selectedSr || selectedSr.trim() === "") {
        //             // Show confirmation modal
        //             $("#confirmationModal").modal("show");
        //         } else {
        //             // Proceed normally
        //             window.location.href = "/nextPage"; // Change URL as needed
        //         }
        //     });

        //     // Confirm Proceed Button Click
        //     $("#confirmProceed").click(function () {
        //         $("#confirmationModal").modal("hide");
        //         window.location.href = "/nextPage"; // Proceed to next page
        //     });
        // });

         

        });
    </script>
}
