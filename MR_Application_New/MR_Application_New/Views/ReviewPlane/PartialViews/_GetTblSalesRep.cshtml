@model List<Model_New.Models.QuestionsNew>
@{
    ViewData["Title"] = "Review Plan";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

<form id="reviewForm" method="post" action="/ReviewPlane/CreateReview" enctype="multipart/form-data">
    <div class="container mt-5 p-4 border rounded shadow-lg bg-light">
        <!-- Step 1: Review Plan -->
        <div id="step-1">
            <h3 class="text-center mb-4 text-primary fw-bold border-bottom pb-2">
                Review Plan
            </h3>
            <div class="row g-3">
                <div class="col-12 col-sm-6">
                    <div class="p-3 border rounded bg-white">
                        <label class="form-label fw-bold">MR Code:</label>
                        <input type="text" id="mrcodeInput" class="form-control" name="mrcode"
                               value="@Context.Session.GetString("UserName")" readonly>
                    </div>
                </div>

                <div class="col-12 col-sm-6 position-relative">
                    <div class="p-3 border rounded bg-white">
                        <label class="form-label fw-bold">Select RSCODE:</label>
                        <input type="text" id="rscodeInput" class="form-control" placeholder="Type RSCODE ..." autocomplete="off">
                        <input type="hidden" id="selectedRscode" name="selectedRscode">
                        <div id="rscodeSuggestions" class="list-group position-absolute w-100" style="z-index: 1000; display: none;"></div>
                    </div>
                </div>


                <!-- Ensure FontAwesome is included in your project -->
                <!-- Ensure FontAwesome is included -->
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

                <div class="col-12 col-sm-6 col-md-4 col-lg-3 text-center">
                    <button type="button" class="btn btn-danger w-100 d-flex align-items-center justify-content-center py-2" id="openSrModal">
                        <i class="fas fa-user-tie fa-lg me-2"></i>
                        <span class="fw-bold">Select SR Name</span>
                    </button>
                </div>


@* 
                <div class="col-12 col-sm-6">
                    <div class="p-3 border rounded bg-white">
                        <label class="form-label fw-bold">Route Name:</label>
                        <select id="routenameInput" class="form-control" name="routename">
                            <option value="">Select Route Name</option>
                        </select>
                    </div>
                </div>

                <div class="col-12 col-sm-6">
                    <div class="p-3 border rounded bg-white">
                        <label class="form-label fw-bold">Route Day:</label>
                        <select id="routedayInput" class="form-control" name="routeday">
                            <option value="">Select Route Day</option>
                        </select>
                    </div>
                </div> *@


                <div class="col-12 col-sm-6 col-md-4 col-lg-3 text-center">
                    <button type="button" id="openRouteFilterModal" class="btn btn-primary d-flex align-items-center">
                        <i class="bi bi-funnel me-2"></i> Filter by Route
                    </button>
                </div>



              

                <div class="col-12 col-sm-6 position-relative">
                    <div class="p-3 border rounded bg-white">
                        <label class="form-label fw-bold">Search Outlet:</label>
                        <input type="text" id="outletInput" class="form-control" placeholder="Type to search..." autocomplete="off">
                        <input type="hidden" id="selectedOutlet" name="selectedOutlet">
                        <div id="outletSuggestions" class="list-group position-absolute w-100" style="z-index: 1000; display: none;"></div>
                    </div>
                </div>


                <div class="col-12 col-sm-6 position-relative">
                    <div class="p-3 border rounded bg-white">
                        <label class="form-label fw-bold">Outlet Type:</label>
                        <select id="outletType" class="form-control" name="outletType">
                            <option value="">Select Outlet Type</option>
                        </select>
                    </div>
                </div>

                <div class="col-12 text-center">
                    <button type="button" class="btn btn-success" id="capturePhotoBtn">Capture Photo</button>
                    <input type="hidden" id="photoCaptured" name="photoCaptured">
                    <p class="text-danger d-none" id="photoError">Please capture a photo before proceeding.</p>
                </div>

                <!-- Display Captured Image -->
                <div class="col-12 text-center mt-3">
                    <img id="capturedImage" class="border rounded d-none" style="max-width: 200px;">
                </div>



                <div class="col-12 text-center mt-4">
                    <button type="button" class="btn btn-success btn-lg px-5 py-2 fw-bold shadow" id="saveReview">
                        <i class="fas fa-save"></i> Save Data
                    </button>
                    <p class="text-success d-none mt-2 fw-bold" id="saveSuccessMsg">✔ Data Saved Successfully!</p>
                </div>



                <div class="col-12 text-center mt-4">
                    <button type="button" class="btn btn-primary btn-lg px-5 py-2 fw-bold shadow" id="nextStep1" disabled>
                        Next <i class="fas fa-arrow-right"></i>
                    </button>
                </div>


            </div>



          
        </div>


        <div class="modal fade" id="photoModal" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Capture Photo</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body text-center">
                        <video id="webcam" autoplay class="border rounded w-100"></video>
                        <canvas id="canvas" class="d-none"></canvas>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="captureBtn">Capture</button>
                    </div>
                </div>
            </div>
        </div>


        <div class="modal fade" id="srModal" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Select SR Name</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <ul id="srList" class="list-group">
                            <!-- SR Names will be dynamically added here -->
                        </ul>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" id="selectSr">Confirm</button>
                    </div>
                </div>
            </div>
        </div>



        <!-- Route Filter Modal -->
        <!-- Route Filter Modal -->
        <div class="modal fade" id="routeFilterModal" tabindex="-1" aria-labelledby="routeFilterModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="routeFilterModalLabel">Filter by Route</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Route Name:</label>
                            <select id="routenameInput" class="form-control" name="routename">
                                <option value="">Select Route Name</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Route Day:</label>
                            <select id="routedayInput" class="form-control" name="routeday">
                                <option value="">Select Route Day</option>
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button id="applyRouteFilter" class="btn btn-primary">Apply Filter</button>
                    </div>
                </div>
            </div>
        </div>




        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const capturePhotoBtn = document.getElementById("capturePhotoBtn");
                const photoModal = new bootstrap.Modal(document.getElementById("photoModal"));
                const webcam = document.getElementById("webcam");
                const canvas = document.getElementById("canvas");
                const captureBtn = document.getElementById("captureBtn");
                const capturedImage = document.getElementById("capturedImage");
                const photoCaptured = document.getElementById("photoCaptured");
                const photoError = document.getElementById("photoError");
                const nextStepBtn = document.getElementById("nextStep1"); // ✅ "Next" button
                let stream = null;
                let capturedFile = null; // ✅ Stores captured image file
                let isDataSaved = false; // ✅ Tracks if data is saved

                // Disable "Next" button initially
                nextStepBtn.disabled = true;

                // Open webcam when clicking Capture Photo button
                capturePhotoBtn.addEventListener("click", async function () {
                    try {
                        stream = await navigator.mediaDevices.getUserMedia({ video: true });
                        webcam.srcObject = stream;
                        photoModal.show();
                    } catch (error) {
                        alert("❌ Error accessing webcam: " + error.message);
                    }
                });

                // Stop camera when modal is closed
                document.getElementById("photoModal").addEventListener("hidden.bs.modal", function () {
                    if (stream) {
                        stream.getTracks().forEach(track => track.stop());
                    }
                });

                // Convert Base64 to File
                function dataURLtoFile(dataUrl, filename) {
                    let arr = dataUrl.split(','), mime = arr[0].match(/:(.*?);/)[1],
                        bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
                    while (n--) {
                        u8arr[n] = bstr.charCodeAt(n);
                    }
                    return new File([u8arr], filename, { type: mime });
                }

                // Capture Image
                captureBtn.addEventListener("click", function () {
                    const context = canvas.getContext("2d");
                    canvas.width = webcam.videoWidth;
                    canvas.height = webcam.videoHeight;
                    context.drawImage(webcam, 0, 0, canvas.width, canvas.height);
                    const imageDataURL = canvas.toDataURL("image/png");

                    // Convert Base64 to File
                    capturedFile = dataURLtoFile(imageDataURL, "captured_photo.png");

                    // Stop webcam stream
                    if (stream) {
                        stream.getTracks().forEach(track => track.stop());
                    }

                    // Display captured image
                    capturedImage.src = imageDataURL;
                    capturedImage.classList.remove("d-none");
                    photoCaptured.value = imageDataURL; // Store captured image data
                    photoModal.hide();
                    photoError.classList.add("d-none");
                });

                // Save Review AJAX Call
                $("#saveReview").click(function () {
                    var rscode = $("#selectedRscode").val();
                    var mrCode = $("#mrcodeInput").val();
                    var outlet = $("#selectedOutlet").val();
                    var outletType = $("#outletType").val();

                    if (!rscode) {
                        alert("❌ RS Code is required.");
                        return;
                    }
                    if (!mrCode) {
                        alert("❌ MR Code is required.");
                        return;
                    }
                    if (!outlet) {
                        alert("❌ Outlet is required.");
                        return;
                    }
                    if (!outletType) {
                        alert("❌ Outlet Type is required.");
                        return;
                    }
                    if (!capturedFile) {
                        alert("❌ Please capture a photo.");
                        return;
                    }

                    var formData = new FormData();
                    formData.append("rscode", rscode);
                    formData.append("mrCode", mrCode);
                    formData.append("outlet", outlet);
                    formData.append("outletType", outletType);
                    formData.append("capturedPhoto", capturedFile);

                    $.ajax({
                        url: '/ReviewPlane/GetReviewstoreImg',
                        type: 'POST',
                        processData: false,
                        contentType: false,
                        data: formData,
                        success: function (response) {
                            alert("✅ " + response.message);
                            isDataSaved = true; // ✅ Mark as saved
                            nextStepBtn.disabled = false; // ✅ Enable "Next" button
                        },
                        error: function (xhr) {
                            var errorMsg = xhr.responseJSON?.message || "❌ Error saving review.";
                            alert(errorMsg);
                        }
                    });
                });

                // Prevent Next button if data is not saved
                
            });
        </script>


     
    </div>
</form>

@section Scripts {
    <script>
        $(document).ready(function () {
           // ✅ Global Variables to Store Selected SR and RSCODE
        let selectedSrs = {}; // Stores selected SRs
        let selectedSr = "";  // Store final selected SR
        let rscode = "";       // Store final selected RSCODE


            
            // Open Modal when clicking "Filter by Route"
        //          $("#openRouteFilterModal").click(function (event) {
        //     event.preventDefault(); // Prevent default action if inside a form
        //     $("#routeFilterModal").modal("show"); // Open the modal
        // });

                 $(document).ready(function () {
            // Open Modal on Button Click
            $("#openRouteFilterModal").click(function () {
                $("#routeFilterModal").modal("show");
            });

            // Apply Filter Button in Modal
            $("#applyRouteFilter").click(function (event) {
                event.preventDefault(); // Prevent any unintended form submission
                $("#routeFilterModal").modal("hide"); // Close modal

                // Optional: Show a success message
                showToast("success", "✅ Route filter applied.");
            });
        });

        






        // ✅ Open SR Modal & Fetch SR List
        $("#openSrModal").click(function () {
            let rscodeFull = $("#rscodeInput").val().trim();
            rscode = rscodeFull.split(" ")[0].trim(); // Extract first part of RSCODE

            if (!rscode) {
                alert("⚠️ Please enter/select an RSCODE first.");
                return;
            }

            alert(`🔍 Fetching SRs for RSCODE: ${rscode}`);

            // Fetch SR Names based on RSCODE
            $.ajax({
                url: "/ReviewPlane/GetSrNames",
                type: "GET",
                data: { rscode },
                success: function (response) {
                    alert(`✅ SRs fetched successfully. Found ${response.length} SR(s).`);

                    $("#srList").empty(); // Clear previous list
                    if (response.length === 0) {
                        alert("⚠️ No sales representatives found.");
                        return;
                    }

                    response.forEach(sr => {
                        let isChecked = selectedSrs[sr.fullDetails] ? "checked" : "";
                        $("#srList").append(`
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <input type="checkbox" class="form-check-input sr-checkbox" value="${sr.fullDetails}" data-rscode="${sr.rS_Code}" ${isChecked}>
                                <label class="ms-2">${sr.fullDetails}</label>
                            </li>
                        `);
                    });

                    $("#srModal").modal("show");
                },
                error: function () {
                    alert("❌ Failed to fetch SR names. Try again later.");
                }
            });
        });


        //         $(document).ready(function () {
        //     $("#toggleRouteFilter").click(function () {
        //         $("#routeFilterSection").toggleClass("d-none");

        //         // Change button text based on visibility
        //         if ($("#routeFilterSection").is(":visible")) {
        //             $(this).html('<i class="bi bi-x-circle me-2"></i> Hide Filter');
        //         } else {
        //             $(this).html('<i class="bi bi-funnel me-2"></i> Filter by Route');
        //         }
        //     });
        // });


        // ✅ Track SR Selection
        $(document).on("change", ".sr-checkbox", function () {
            let srValue = $(this).val();
            if ($(this).is(":checked")) {
                selectedSrs[srValue] = true;
            } else {
                delete selectedSrs[srValue];
            }
        });

        // ✅ Confirm SR Selection & Fetch Routes
        $("#selectSr").click(function () {
            let selectedSrArray = Object.keys(selectedSrs);
            selectedSr = selectedSrArray.join(", "); // Store globally
            rscode = $(".sr-checkbox:checked").first().data("rscode") || ""; // Store globally

            if (!selectedSr) {
                alert("⚠️ Please select at least one SR Name.");
                return;
            }

            $("#srModal").modal("hide");

            // Fetch Routes Based on Selected SR
            $.ajax({
                url: "/ReviewPlane/GetRouteNames",
                type: "GET",
                data: { srname: selectedSr, rscode },
                success: function (routes) {
                    alert(`✅ Routes fetched successfully. Found ${routes.length} route(s).`);

                    $("#routenameInput").empty().append('<option value="">Select Route Name</option>');

                    routes.forEach(route => {
                        let localityName = route.locality_Name === "N.A." ? "TBA" : route.locality_Name;
                        $("#routenameInput").append(`<option value="${localityName}">${localityName}</option>`);
                    });
                },
                error: function () {
                    alert("❌ Failed to fetch route names.");
                }
            });
        });

        // ✅ Fetch Route Days when Route is Selected
        $("#routenameInput").change(function () {
            let routename = $(this).val()?.trim() || "";

            if (!selectedSr || !rscode || !routename) {
                alert("⚠️ Please select an SR and Route before proceeding.");
                return;
            }

            alert(`🔍 Fetching Route Days for: ${routename} | SR: ${selectedSr} | RSCODE: ${rscode}`);

            $.ajax({
                url: "/ReviewPlane/GetRouteDays",
                type: "GET",
                data: { srname: selectedSr, rscode, routename },
                success: function (routeDays) {
                    alert(`✅ Route Days fetched successfully. Found ${routeDays.length} day(s).`);

                    let daysOfWeek = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
                    let todayIndex = new Date().getDay();

                    $("#routedayInput").empty().append('<option value="">Select Route Day</option>');

                    routeDays.forEach(day => {
                        if (daysOfWeek.includes(day)) {
                            let isSelected = (daysOfWeek.indexOf(day) === todayIndex - 1) ? 'selected' : '';
                            $("#routedayInput").append(`<option value="${day}" ${isSelected}>${day}</option>`);
                        }
                    });
                },
                error: function () {
                    alert("❌ Failed to fetch route days.");
                }
            });
        });


                $("#outletInput").on("keyup", function () {
            var searchTerm = $(this).val().trim();
            var rscode = $("#selectedRscode").val();
            let srname = selectedSr;
            var routeDate = $("#routedayInput").val();
            var routeName = $("#routenameInput").val();

            // alert("SR Name: " + srname);
            // alert("Route Date: " + routeDate);
            // alert("Route Name: " + routeName);

            if (searchTerm.length > 2 && rscode) {
                let requestData = { term: searchTerm, rscode: rscode };

                // If additional parameters exist, include them in the request
                if (srname && routeDate && routeName) {
                    requestData.srname = srname;
                    requestData.routeDate = routeDate;
                    requestData.routeName = routeName;
                }
                alert("🔍 Fetching Outlets with Data: " + JSON.stringify(requestData));

                $.get('/ReviewPlane/GetOutlets', requestData)
                    .done(function (data) {
                        $("#outletSuggestions").empty().show();

                        if (data.length > 0) {
                            data.forEach(item => {
                                $("#outletSuggestions").append(
                                    `<a class="list-group-item list-group-item-action p-2"
                                        data-code="${item.code}" data-name="${item.name}">
                                        ${item.name} (${item.code})
                                    </a>`
                                );
                            });
                        } else {
                            $("#outletSuggestions").hide();
                            alert("⚠️ No matching outlets found!");
                        }
                    })
                    .fail(function (xhr, status, error) {
                        alert("❌ Error fetching outlets: " + error);
                    });
            } else {
                $("#outletSuggestions").hide();
            }
        });

        // ✅ Select Outlet from Dropdown
        $(document).on("click", "#outletSuggestions .list-group-item", function () {
            let selectedOutletName = $(this).data("name");
            let selectedOutletCode = $(this).data("code");

            $("#outletInput").val(selectedOutletName + " (" + selectedOutletCode + ")");
            $("#selectedOutlet").val(selectedOutletCode);
            $("#outletSuggestions").hide();

            alert("✅ Selected Outlet: " + selectedOutletName + " (" + selectedOutletCode + ")");
        });







                   $("#rscodeInput").on("keyup", function () {
            var searchTerm = $(this).val().trim();
            if (searchTerm.length > 0) {
                $.get('/ReviewPlane/GetRSCodes', { term: searchTerm })
                    .done(function (data) {
                        $("#rscodeSuggestions").empty().show();
                        data.forEach(item => {
                            $("#rscodeSuggestions").append(
                                `<a class="list-group-item list-group-item-action p-2"
                                    data-id="${item.code}" data-name="${item.name}">
                                    <strong>${item.code}</strong> - ${item.name}
                                </a>`
                            );
                        });
                    })
                    .fail(function (xhr, status, error) {
                        alert("Error fetching RSCODEs: " + error);
                        console.error("Failed to fetch RSCODEs:", xhr.responseText);
                    });
            } else {
                $("#rscodeSuggestions").hide();
            }
        });

        // 🔹 Select RSCODE from dropdown
        $(document).on("click", "#rscodeSuggestions .list-group-item", function () {
            $("#rscodeInput").val($(this).data("id") + " - " + $(this).data("name"));
            $("#selectedRscode").val($(this).data("id"));
            $("#rscodeSuggestions").hide();
        });

        // 🔹 Handle fetching Outlet suggestions based on RSCODE
        // $("#outletInput").on("keyup", function () {
        //     var searchTerm = $(this).val().trim();
        //     var rscode = $("#selectedRscode").val();

        //     if (searchTerm.length > 2 && rscode) {
        //         $.get('/ReviewPlane/GetOutlets', { term: searchTerm, rscode: rscode })
        //             .done(function (data) {
        //                 $("#outletSuggestions").empty().show();
        //                 data.forEach(item => {
        //                     $("#outletSuggestions").append(
        //                         `<a class="list-group-item list-group-item-action p-2"
        //                             data-code="${item.code}" data-name="${item.name}">
        //                             ${item.name} (${item.code})
        //                         </a>`
        //                     );
        //                 });
        //             })
        //             .fail(function (xhr, status, error) {
        //                 alert("Error fetching outlets: " + error);
        //                // console.error("Failed to fetch outlets:", xhr.responseText);
        //             });
        //     } else {
        //         $("#outletSuggestions").hide();
        //     }
        // });

        // // 🔹 Select Outlet from dropdown
        // $(document).on("click", "#outletSuggestions .list-group-item", function () {
        //     $("#outletInput").val($(this).data("name") + " (" + $(this).data("code") + ")");
        //     $("#selectedOutlet").val($(this).data("code"));
        //     $("#outletSuggestions").hide();
        // });

        // // 🔹 Fetch Outlet Types from Server
        // $.get('/ReviewPlane/GetOutletTypes')
        //     .done(function (data) {
        //         let outletDropdown = $("#outletType");
        //         outletDropdown.empty().append('<option value="">Select Outlet Type</option>');
        //         console.log(data);

        //         if (data.length > 0) {
        //             data.forEach(item => {
        //                         outletDropdown.append(`<option value="${item.value
        // }">${item.text}</option>`);
        //             });
        //         }
        //     })
        //     .fail(function (xhr, status, error) {
        //         alert("Error fetching outlet types: " + error);
        //        // console.error("Failed to fetch outlet types:", xhr.responseText);
        //     });




            // 🔹 Fetch Outlets Based on Search and Conditions
        //            $("#outletInput").on("keyup", function () {
        //     var searchTerm = $(this).val().trim();
        //     var rscode = $("#selectedRscode").val();
        //     let srname = $("#srnameInput").val();
        //     var routeDate = $("#routedayInput").val();
        //     var routeName = $("#routenameInput").val();

        //     console.log(srname);
        //     console.log(routeDate);
        //     console.log(routeName);

        //     if (searchTerm.length > 2 && rscode) {
        //         let requestData = { term: searchTerm, rscode: rscode };

        //         // If additional parameters exist, include them in the request
        //         if (srname && routeDate && routeName) {
        //             requestData.srname = srname;
        //             requestData.routeDate = routeDate;
        //             requestData.routeName = routeName;
        //         }
        //         console.log(requestData);

        //         $.get('/ReviewPlane/GetOutlets', requestData)
        //             .done(function (data) {
        //                 $("#outletSuggestions").empty().show();

        //                 if (data.length > 0) {
        //                     data.forEach(item => {
        //                         $("#outletSuggestions").append(
        //                             `<a class="list-group-item list-group-item-action p-2"
        //                                 data-code="${item.code}" data-name="${item.name}">
        //                                 ${item.name} (${item.code})
        //                             </a>`
        //                         );
        //                     });
        //                 } else {
        //                     $("#outletSuggestions").hide(); // Hide the suggestion box
        //                     alert("No matching outlets found!"); // Show alert when no data is returned
        //                 }
        //             })
        //             .fail(function (xhr, status, error) {
        //                 alert("Error fetching outlets: " + error);
        //             });
        //     } else {
        //         $("#outletSuggestions").hide();
        //     }
        // });

        // // 🔹 Select Outlet from Dropdown
        // $(document).on("click", "#outletSuggestions .list-group-item", function () {
        //     $("#outletInput").val($(this).data("name") + " (" + $(this).data("code") + ")");
        //     $("#selectedOutlet").val($(this).data("code"));
        //     $("#outletSuggestions").hide();
        // });


            // 🔹 Fetch Outlet Types from Server
            $.get('/ReviewPlane/GetOutletTypes')
                .done(function (data) {
                    let outletDropdown = $("#outletType");
                    outletDropdown.empty().append('<option value="">Select Outlet Type</option>');

                    if (data.length > 0) {
                        data.forEach(item => {
                            outletDropdown.append(`<option value="${item.value}">${item.text}</option>`);
                        });
                    }
                })
                .fail(function (xhr, status, error) {
                    alert("Error fetching outlet types: " + error);
                });

    





   

            
            function showError(element, message) {
                $(element).next('.error-message').remove(); // Remove any existing error message
                $(element).after(`<div class="error-message text-danger">${message}</div>`);
            }

            function clearErrors() {
                $('.error-message').remove();
            }

            $("#nextStep1").click(function () {
                clearErrors();
                var isValid = true;

                var rscode = $("#selectedRscode").val();
                var mrCode = $("#mrcodeInput").val();
                var outlet = $("#selectedOutlet").val();
                var outlettype = $("#outletType").val();

                if (!rscode) {
                    showError("#selectedRscode", "RSCODE is required.");
                    isValid = false;
                }
                if (!mrCode) {
                    showError("#mrcodeInput", "MR Code is required.");
                    isValid = false;
                }
                if (!outlet) {
                    showError("#selectedOutlet", "Outlet is required.");
                    isValid = false;
                }

                if (!isValid) return;

                // Fetch questions via AJAX
                $.get('/ReviewPlane/GetQuestions', { rscode, mrCode, outlet, outlettype }, function (data) {
                    if (data && data.length > 0) {
                        var questionContainer = $('#questionContainer');
                        questionContainer.empty();
                        data.forEach(function (question, index) {
                            var questionHtml = `<div class="col-12 col-sm-6">
                                <div class="p-3 border rounded bg-white">
                                    <label class="fw-bold">Question ${index + 1}: ${question.question}</label>
                                    <input type="hidden" name="answers[${index}].QuestionId" value="${question.questionId}" />
                                    <input type="hidden" name="answers[${index}].Type" value="${question.type}" />`;

                            if (question.type === "radio") {
                                var yesChecked = (question.selectedAnswer === 'Yes') ? 'checked' : '';
                                var noChecked = (question.selectedAnswer === 'No') ? 'checked' : '';
                                questionHtml += `
                                    <div class="form-check">
                                        <input type="radio" class="form-check-input" name="answers[${index}].Answer" value="Yes" ${yesChecked} required />
                                        <label class="form-check-label">Yes</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="radio" class="form-check-input" name="answers[${index}].Answer" value="No" ${noChecked} required />
                                        <label class="form-check-label">No</label>
                                    </div>`;
                            } else if (question.type === "text") {
                                questionHtml += `<input type="text" class="form-control answer-input" name="answers[${index}].Answer" value="${question.selectedAnswer || ''}" required />`;
                            } else if (question.type === "photo") {
                                questionHtml += `<input type="file" class="form-control answer-input" name="answers[${index}].PhotoPath" accept="image/*" required />`;
                            }

                            questionHtml += `<div class="error-message text-danger"></div></div></div>`;
                            questionContainer.append(questionHtml);
                        });

                        // Transition to step 2
                        $('#step-1').hide();
                        $('#step-2').show();
                    }
                }).fail(function () {
                    alert("Error loading questions.");
                });
            });

            // Step 2: Next button
            $("#nextStep2").click(function () {
                clearErrors();
                var isValid = true;

                $('input[name^="answers"]').each(function () {
                    if ($(this).attr('type') === 'radio') {
                        var name = $(this).attr('name');
                        if ($(`input[name="${name}"]:checked`).length === 0) {
                            showError($(this).closest('.p-3'), "This question is required.");
                            isValid = false;
                        }
                    } else if ($(this).attr('type') === 'file') {
                        if (!$(this).val()) {
                            showError($(this), "Please upload an image.");
                            isValid = false;
                        }
                    } else {
                        if (!$(this).val().trim()) {
                            showError($(this), "This field is required.");
                            isValid = false;
                        }
                    }
                });

                if (!isValid) return;

                var rscode = $("#selectedRscode").val();
                var mrCode = $("#mrcodeInput").val();
                var outlet = $("#selectedOutlet").val();
                var outlettype = $("#outletType").val();

                // Fetch Post-visit questions
                $.get('/ReviewPlane/PostQuestions', { rscode, mrCode, outlet, outlettype }, function (data) {
                    if (data && data.length > 0) {
                        var postqsnContainer = $('#postqsnContainer');
                        postqsnContainer.empty();
                        data.forEach(function (question, index) {
                            var questionHtml = `<div class="col-12 col-sm-6">
                                <div class="p-3 border rounded bg-white">
                                    <label class="fw-bold">Question ${index + 1}: ${question.question}</label>
                                    <input type="hidden" name="postAnswers[${index}].QuestionId" value="${question.questionId}" />
                                    <input type="hidden" name="postAnswers[${index}].Type" value="${question.type}" />`;

                            if (question.type === "radio") {
                                var yesChecked = (question.selectedAnswer === 'Yes') ? 'checked' : '';
                                var noChecked = (question.selectedAnswer === 'No') ? 'checked' : '';
                                questionHtml += `
                                    <div class="form-check">
                                        <input type="radio" class="form-check-input" name="postAnswers[${index}].Answer" value="Yes" ${yesChecked} required />
                                        <label class="form-check-label">Yes</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="radio" class="form-check-input" name="postAnswers[${index}].Answer" value="No" ${noChecked} required />
                                        <label class="form-check-label">No</label>
                                    </div>`;
                            } else if (question.type === "text") {
                                questionHtml += `<input type="text" class="form-control answer-input" name="postAnswers[${index}].Answer" value="${question.selectedAnswer || ''}" required />`;
                            } else if (question.type === "photo") {
                                questionHtml += `<input type="file" class="form-control answer-input" name="postAnswers[${index}].PhotoPath" accept="image/*" required />`;
                            }

                            questionHtml += `<div class="error-message text-danger"></div></div></div>`;
                            postqsnContainer.append(questionHtml);
                        });

                        // Transition to step 3
                        $('#step-2').hide();
                        $('#step-3').show();
                    }
                }).fail(function () {
                    alert("Error loading post-visit questions.");
                });
            });

            // Step 2: Previous button
            $("#prevStep2").click(function () {
                $('#step-2').hide();
                $('#step-1').show();
            });

            // Step 3: Previous button
            $("#prevStep3").click(function () {
                $('#step-3').hide();
                $('#step-2').show();
            });
        







             $("form#reviewForm").submit(function (e) {
                    e.preventDefault();

                    var formData = new FormData(); // Use FormData for file uploads

                    formData.append("MRCode", $("#mrcodeInput").val());
                    formData.append("RSCODE", $("#selectedRscode").val());
                    formData.append("SelectedOutlet", $("#selectedOutlet").val());

                    var preAnswers = [];
                    var postAnswers = [];

                    $("#step-2 .p-3, #step-3 .p-3").each(function () {
                        var questionId = $(this).find("input[name^='answers['],input[name^='postAnswers[']").val();
                        var type = $(this).find("input[name$='Type']").val();
                        var answer = null;
                        var photoData = null;

                        $(this).find("input").each(function () {
                            var name = $(this).attr("name");
                            if (name.includes("Answer")) {
                                if ($(this).attr('type') === 'radio' && $(this).prop('checked')) {
                                    answer = $(this).val();
                                }

                                // } else if ($(this).attr('type') !== 'radio') {
                                //     answer = $(this).val();
                                // }
                            }
                        });

                        if (type === 'photo') {
                            var photoInput = $(this).find("input[type='file']")[0];
                            if (photoInput && photoInput.files.length > 0) {
                                var file = photoInput.files[0];
                                var fileKey = `file_${questionId}`; // Ensure the key matches what the backend expects
                                formData.append("Files", file);
                                photoData = file.name; // Store only the filename reference in JSON
                            }
                        }

                        var answerObj = {
                            QuestionId: questionId,
                            Type: type,
                            Answer: answer,
                            PhotoPath: photoData // Store file name reference
                        };

                        if ($(this).closest("#step-2").length) {
                            preAnswers.push(answerObj);
                        } else {
                            postAnswers.push(answerObj);
                        }
                    });

                    var jsonData = {
                        PreAnswers: preAnswers,
                        PostAnswers: postAnswers
                    };

                    formData.append("jsonData", JSON.stringify(jsonData)); // Attach JSON data

                    // AJAX request
                    $.ajax({
                        url: "/ReviewPlane/CreateReview",
                        type: "POST",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (response) {
                            alert("Review submitted successfully!");
                            window.location.href = "/ReviewPlane/Index";
                        },
                        error: function (xhr, status, error) {
                            console.error("Error:", xhr.responseText);
                            alert("Error submitting the review.");
                        }
                    });
                });


        });
    </script>
}
