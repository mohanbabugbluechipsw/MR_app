@model List<Model_New.Models.tbl_OSA_question>

@{
    ViewData["Title"] = "Questionnaire";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    // Count the total number of questions
    int totalQuestions = Model?.Count ?? 0;
}

<h2 class="text-center mt-4">OSA Questionnaire</h2>

@if (ViewBag.OutletName != null)
{
    <p class="text-center font-weight-bold">OSA - @ViewBag.OutletName</p>
}

@if (Model != null && Model.Any())
{
    <div class="text-center mb-3">
        <label class="font-weight-bold text-primary">Total Questions: @totalQuestions</label>
    </div>

    <form id="questionForm" class="container mt-4">
        <div id="questionsContainer" class="row">
            @foreach (var category in Model.GroupBy(q => q.GroupName))
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="category-section p-3 shadow-sm rounded">
                        <h5 class="category-title text-primary">@category.Key</h5> <!-- Category Name -->
                        @foreach (var question in category)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="answers" value="@question.Id" id="q@question.Id" onclick="updateAnswerCount()">
                                <label class="form-check-label" for="q@question.Id">@question.QuestionText</label>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <div class="text-center mt-4">
            <button type="button" class="btn btn-primary btn-lg px-4" onclick="submitAnswers()">Submit</button>
        </div>

        <!-- Label to show total answered questions -->
        <div class="text-center mt-3">
            <label class="font-weight-bold text-success">Answered Questions: <span id="answeredCount">0</span></label>
        </div>

        <!-- Hidden label for category-wise answered count -->
        <div class="text-center mt-2" style="display: none;">
            <label class="font-weight-bold text-secondary">Category-wise Answers: <span id="categoryAnsweredCount"></span></label>
        </div>
    </form>
}
else
{
    <p class="text-center text-muted">No questions available.</p>
}

<script>
    function updateAnswerCount() {
        let totalAnswered = 0;
        let categoryAnswers = {};

        document.querySelectorAll('.category-section').forEach(categorySection => {
            let groupName = categorySection.querySelector('.category-title').innerText;
            let answeredCount = 0;

            categorySection.querySelectorAll('input[name="answers"]').forEach(checkbox => {
                if (checkbox.checked) {
                    answeredCount++;
                }
            });

            if (answeredCount > 0) {
                categoryAnswers[groupName] = answeredCount;
            }

            totalAnswered += answeredCount;
        });

        // Update total answered questions label
        document.getElementById("answeredCount").innerText = totalAnswered;

        // Update hidden category-wise answered count label
        document.getElementById("categoryAnsweredCount").innerText = JSON.stringify(categoryAnswers);
    }

    function submitAnswers() {
        let answers = [];

        document.querySelectorAll('.category-section').forEach(categorySection => {
            let groupName = categorySection.querySelector('.category-title').innerText;

            categorySection.querySelectorAll('input[name="answers"]').forEach(checkbox => {
                answers.push({
                    questionId: parseInt(checkbox.value),
                    groupName: groupName,
                    answer: checkbox.checked ? "Yes" : "No"
                });
            });
        });

        if (answers.length === 0) {
            alert("No questions available to submit.");
            return;
        }

        fetch('@Url.Action("SaveAnswers", "ReviewPlane")', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(answers)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error("Failed to save answers.");
            }
            return response.json();
        })
              .then(data => {
        alert(data.message);
        if (data.message === "Answers submitted successfully!") {
            fetch('@Url.Action("GetOutletType", "ReviewPlane")') // Fetch OutletType from session
            .then(response => response.json())
            .then(sessionData => {
                let outletType = sessionData.outletType;
                if (outletType === "ETUP") {

                    window.location.href = '@Url.Action("ETupView", "ReviewPlane")';
                } else if (outletType === "FC" || outletType === "WS") {
                    window.location.href = '@Url.Action("AnotherView", "ReviewPlane")';
                } else {
                    window.location.href = '@Url.Action("DefaultView", "ReviewPlane")';
                }
            });
        }
    })
            .catch(error => {
            console.error('Error:', error.message);
            alert("An error occurred while saving answers.");
        });
    }
</script>

<style>
    body {
        background-color: #f8f9fa;
    }

    .category-section {
        background: #ffffff;
        border: 1px solid #ddd;
        border-radius: 8px;
        transition: 0.3s ease-in-out;
    }

        .category-section:hover {
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        }

    .category-title {
        font-weight: bold;
        margin-bottom: 10px;
    }

    .form-check {
        margin-bottom: 8px;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
        transition: 0.3s ease-in-out;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }
</style>
